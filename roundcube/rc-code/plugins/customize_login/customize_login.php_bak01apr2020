
<?php
/**
 * Customizable login page
 * This plugin allows users to customize their login page
 * @version 1.0.0
*/

class customize_login extends rcube_plugin {

  public $task = 'settings';
  private $targetFolder = '/var/www/html/roundcubemail/media/';
  private $domainFolder = 'default/';
  private $rc;
  private $rcmail;
  private $top_frame_file;
  private $right_frame_file;
  private $bottom_frame_file;
  private $left_frame_file;
  private $logo_img;
  private $bg_color;
  private $bg_img;
  private $bg_style;
  private $bg_choice;
  private $userrole;

  function init() {
    rcube::console("Inside init");
    $this->rc = rcube::get_instance();
    $this->rcmail = rcmail::get_instance();

    $this->userrole = $this->getUserrole();
    
    $this->load_config('config.inc.php.dist');
    $this->load_config('config.inc.php');
    
    $this->add_texts('localization/', true);
    
    if(strpos($this->userrole, 'admin')) { 
      $this->add_hook('settings_actions', array($this, 'settings_actions'));
    }

    $this->getHost();
    $this->getMediaFileNames();

    $this->register_action('plugin.customize_login', array($this, 'init_html_customize_login'));
    $this->register_action('plugin.preview_login', array($this, 'init_html_preview_login'));

    $this->register_action('plugin.check_if_frames_exist', array($this, 'check_if_frames_exist_handler'));
    $this->register_action('plugin.create_default_frames', array($this, 'create_default_frames_handler'));
    
    $this->register_action("plugin.populate_bg_img_preview", array($this, "populate_bg_img_preview_handler"));
    $this->register_action("plugin.populate_bgcolor", array($this, "populate_bgcolor_handler"));
    $this->register_action("plugin.populate_top_frame", array($this, "populate_top_frame_handler"));
    $this->register_action("plugin.populate_right_frame", array($this, "populate_right_frame_handler"));
    $this->register_action("plugin.populate_bottom_frame", array($this, "populate_bottom_frame_handler"));
    $this->register_action("plugin.populate_left_frame", array($this, "populate_left_frame_handler"));

    $this->register_action("plugin.get_bg_img_preview", array($this, "get_bg_img_preview_handler"));
    $this->register_action("plugin.set_bg_choice", array($this, "set_bg_choice_handler"));

    $this->register_action('plugin.save_bgimg', array($this, 'save_bgimg_handler'));
    $this->register_action('plugin.save_bgcolor', array($this, 'save_bgcolor_handler'));
    $this->register_action('plugin.save_top_frame', array($this, 'save_top_frame_handler'));
    $this->register_action('plugin.save_right_frame', array($this, 'save_right_frame_handler'));
    $this->register_action('plugin.save_bottom_frame', array($this, 'save_bottom_frame_handler'));
    $this->register_action('plugin.save_left_frame', array($this, 'save_left_frame_handler'));

    if (strpos ( $this->rc->action, 'plugin.customize_login' ) === 0) {
        $this->include_script('customize_login.js');
    }
  }

  private function getUserrole()
  {
    rcube::console('Inside getUserrole');
    //Get xf instance
    include_once '/var/www/html/roundcubemail/plugins/xf_directory/xf.php';
    $xf_instance = xf2::get_instance();
    $user_properties = $xf_instance->get_xf_user_properties(array('userrole'));
    rcube::console("USERROLE: " . json_encode($user_properties));
    return $user_properties['userrole'];
  }

  function settings_actions($args) {
    $args ['actions'] [] = array(
        'action' => 'plugin.customize_login',
        'label' => 'customize_login.customize_login',
        'title' => 'customize_login.customize_login'
    );
    return $args;
  }

  function getHost() {
    rcube::console("Inside getHost");
    list($host) = explode(':', $_SERVER['HTTP_HOST']);
    $this->domainFolder = $host . '/';
  }

  function getMediaFileNames() {
    rcube::console("Inside getMediaFileNames");
    $this->logo_img = $this->rc->config->get('logo_img');
    $this->bg_color = $this->rc->config->get('bg_color');
    $this->top_frame_file = $this->rc->config->get('top_frame_file');
    $this->right_frame_file = $this->rc->config->get('right_frame_file');
    $this->bottom_frame_file = $this->rc->config->get('bottom_frame_file');
    $this->left_frame_file = $this->rc->config->get('left_frame_file');
    $this->bg_style = $this->rc->config->get('bg_style');
    $this->bg_img = $this->rc->config->get('bg_img');
    $this->bg_choice = $this->rc->config->get('bg_choice');
  }

  function check_if_frames_exist_handler() {
    rcube::console("Inside check if frames exist");
    $this->rcmail->output->command('plugin.ifFramesExist', array('isPresent' => scandir($this->targetFolder . $this->domainFolder) >= 4));
  }

  function create_default_frames_handler() {
    rcube::console("Inside create default frames");
    try {
       mkdir($this->targetFolder . $this->domainFolder, 0777);
       chmod($this->targetFolder . $this->domainFolder, 0777);
       file_put_contents($this->targetFolder . $this->domainFolder . $this->bg_color, 'default' . PHP_EOL);
       file_put_contents($this->targetFolder . $this->domainFolder . $this->bg_style, 'background-image: url("skins/elastic/SkyconnectLoginPageOptimal.jpg"); background-repeat: no-repeat; background-size: cover;' . PHP_EOL);
       file_put_contents($this->targetFolder . $this->domainFolder . $this->bg_choice, 'image' . PHP_EOL);
       touch($this->targetFolder . $this->domainFolder . $this->top_frame_file);
       touch($this->targetFolder . $this->domainFolder . $this->right_frame_file);
       touch($this->targetFolder . $this->domainFolder . $this->bottom_frame_file);
       touch($this->targetFolder . $this->domainFolder . $this->left_frame_file);
       $this->rcmail->output->command('plugin.defaultFramesCreated', array('framesCreated' => true));
    } catch (Exception $e) {
       $this->rcmail->output->command('plugin.defaultFramesCreated', array('framesCreated' => false));
    }
  }

  function populate_bg_img_preview_handler() {
    rcube::console("Inside populate bg img preview handler");
    $img = glob($this->targetFolder . $this->domainFolder . $this->bg_img . '.*')[0];
    if (!is_null($img)) {
      $file = substr($img, strripos($img, '/') + 1);
      $this->rcmail->output->command('plugin.populateBgImgPreview', array('imgFile' => $file));
    } else {
      $this->rcmail->output->command('plugin.populateBgImgPreview', array('imgFile' => false));
    }
  }

  function set_bg_choice_handler() {
    rcube::console("Inside set bg choice");
    $targetFile = $this->targetFolder . $this->domainFolder . $this->bg_choice;
    try {
      if(file_exists($targetFile)) {
        $fileContent = file_get_contents($targetFile);
        $this->rcmail->output->command('plugin.setBgChoice', array('fileContent' => $fileContent));
      }
    } catch (Exception $e) {
        $this->rcmail->output->show_message($this->gettext('get_file_failed'), 'error');
    }
  }

  function populate_bgcolor_handler() {
    rcube::console("Inside populate bgcolor");
    $targetFile = $this->targetFolder . $this->domainFolder . $this->bg_color;
    try {
      if(file_exists($targetFile)) {
        $fileContent = file_get_contents($targetFile);
        $this->rcmail->output->command('plugin.populateBgColor', array('fileContent' => $fileContent));
      }
    } catch (Exception $e) {
        $this->rcmail->output->show_message($this->gettext('get_file_failed'), 'error');
    }
  }

  function populate_top_frame_handler() {
    rcube::console("Inside populate top frame");
    $targetFile = $this->targetFolder . $this->domainFolder . $this->top_frame_file;
    try {
      if(file_exists($targetFile)) {
        $fileContent = file_get_contents($targetFile);
        $this->rcmail->output->command('plugin.populateTopFrame', array('fileContent' => $fileContent));
      }
    } catch (Exception $e) {
        $this->rcmail->output->show_message($this->gettext('get_file_failed'), 'error');
    }
  }

  function populate_right_frame_handler() {
    rcube::console("Inside populate right frame");
    $targetFile = $this->targetFolder . $this->domainFolder . $this->right_frame_file;
    try {
      if(file_exists($targetFile)) {
        $fileContent = file_get_contents($targetFile);
        $this->rcmail->output->command('plugin.populateRightFrame', array('fileContent' => $fileContent));
      }
    } catch (Exception $e) {
        $this->rcmail->output->show_message($this->gettext('get_file_failed'), 'error');
    }
  }

  function populate_bottom_frame_handler() {
    rcube::console("Inside populate bottom frame");
    $targetFile = $this->targetFolder . $this->domainFolder . $this->bottom_frame_file;
    try {
      if(file_exists($targetFile)) {
        $fileContent = file_get_contents($targetFile);
        $this->rcmail->output->command('plugin.populateBottomFrame', array('fileContent' => $fileContent));
      }
    } catch (Exception $e) {
        $this->rcmail->output->show_message($this->gettext('get_file_failed'), 'error');
    }
  }

  function populate_left_frame_handler() {
    rcube::console("Inside populate left frame");
    $targetFile = $this->targetFolder . $this->domainFolder . $this->left_frame_file;
    try {
      if(file_exists($targetFile)) {
        $fileContent = file_get_contents($targetFile);
        $this->rcmail->output->command('plugin.populateLeftFrame', array('fileContent' => $fileContent));
      }
    } catch (Exception $e) {
        $this->rcmail->output->show_message($this->gettext('get_file_failed'), 'error');
    }
  }

  function get_bg_img_preview_handler() {
    $fileExt = $_POST['fileExt'];
    $bgImgSrc = 'media/' . $this->domainFolder . $this->bg_img . '.' . $fileExt . '?s=' . time();
    $this->rcmail->output->command('plugin.showBgImgPreview', array('bgImgSrc' => $bgImgSrc));
  }

  function init_html_customize_login() {
    $this->rc->output->set_pagetitle($this->gettext('customize_login'));
    $this->rc->output->send('customize_login.customize_login');
  }

  function init_html_preview_login() {
    $this->rc->output->set_pagetitle($this->gettext('preview_login'));
    $this->rc->output->send('customize_login.preview_login');
  }

  function save_contents_as_media_files($content, $action) {
    $targetFolder = $this->targetFolder . $this->domainFolder;
    $retVal = false;
    switch ($action) {
      case 'bgimg-save':
        $fileName = basename($content['name']);
        $fileExtension = explode('.', $fileName)[1];
        $bgImg = glob($targetFolder . $this->bg_img . '.*')[0];
        $ext = pathinfo($bgImg, PATHINFO_EXTENSION);
        $newBgImg = $targetFolder . $this->bg_img . '.' . $fileExtension;
        if (!is_null($ext) && $ext !== $fileExtension) {
          rename($bgImg, $newBgImg);
        }
        $retVal = move_uploaded_file($content['tmp_name'], $newBgImg);
        $styleContent = 'background-image: url("media/' . $this->domainFolder . $this->bg_img . '.' . $fileExtension . '"); background-size: cover; background-repeat: no-repeat;';
        rcube::console('STYLE: ' . $styleContent);
        $retVal = file_put_contents($targetFolder . $this->bg_style, $styleContent);
        $retVal = file_put_contents($targetFolder . $this->bg_choice, 'image');
        break;
      case 'bgcolor-save':
        $styleContent = 'background-color: ' . $content;
        $retVal = file_put_contents($targetFolder . $this->bg_color, $content);
        $retVal = file_put_contents($targetFolder . $this->bg_style, $styleContent);
	$retVal = file_put_contents($targetFolder . $this->bg_choice, 'color');
        break;
      case 'top-frame-save':
        $retVal = file_put_contents($targetFolder . $this->top_frame_file, $content);
        break;
      case 'right-frame-save':
        $retVal = file_put_contents($targetFolder . $this->right_frame_file, $content);
        break;
      case 'bottom-frame-save':
        $retVal = file_put_contents($targetFolder . $this->bottom_frame_file, $content);
        break;
      case 'left-frame-save':
        $retVal = file_put_contents($targetFolder . $this->left_frame_file, $content);
        break;
      default:
        rcube::console('Wrong action! Something went wrong.');
    }
    rcube::console("Retvalue: " . $retVal);
    return $retVal;
  }

  function save_bgimg_handler() {
    rcube::console("Inside logo handler: " . json_encode($_FILES));
    $content = $_FILES['bgimg-content'];
    $action = 'bgimg-save';
    $this->save_contents_as_media_files($content, $action);
  }

  function save_bgcolor_handler() {
    rcube::console("Inside bgcolor handler: " . json_encode($_POST));
    $content = $_POST['bgcolor-content'];
    $action = 'bgcolor-save';
    if ($this->save_contents_as_media_files($content, $action) !== false) {
      $this->rcmail->output->show_message($this->gettext("success_changed"), 'confirmation');
    } else {
      $this->rcmail->output->show_message($this->gettext("failed"), 'error');
    }
  }

  function save_top_frame_handler() {
    rcube::console("Inside top frame handler");
    $content = $_POST['top-frame-content'];
    $action = 'top-frame-save';
    if ($this->save_contents_as_media_files($content, $action) !== false) {
      $this->rcmail->output->show_message($this->gettext("success_changed"), 'confirmation');
    } else {
      $this->rcmail->output->show_message($this->gettext("failed"), 'error');
    }
  }

  function save_right_frame_handler() {
    rcube::console("Inside right frame handler");
    $content = $_POST['right-frame-content'];
    $action = 'right-frame-save';
    if ($this->save_contents_as_media_files($content, $action) !== false) {
      $this->rcmail->output->show_message($this->gettext("success_changed"), 'confirmation');
    } else {
      $this->rcmail->output->show_message($this->gettext("failed"), 'error');
    }
  }

  function save_bottom_frame_handler() {
    rcube::console("Inside bottom frame handler");
    $content = $_POST['bottom-frame-content'];
    $action = 'bottom-frame-save';
    if ($this->save_contents_as_media_files($content, $action) !== false) {
      $this->rcmail->output->show_message($this->gettext("success_changed"), 'confirmation');
    } else {
      $this->rcmail->output->show_message($this->gettext("failed"), 'error');
    }
  }

  function save_left_frame_handler() {
    rcube::console("Inside left frame handler");
    $content = $_POST['left-frame-content'];
    $action = 'left-frame-save';
    if ($this->save_contents_as_media_files($content, $action) !== false) {
      $this->rcmail->output->show_message($this->gettext("success_changed"), 'confirmation');
    } else {
      $this->rcmail->output->show_message($this->gettext("failed"), 'error');
    }
  }
}
?>
