<?php

class ideolve_connector
{
	
    private $rc;
    private $ideolveuser;
    private $ideolveuserpassword;
    private $ideolveserver;
    private $ideolve_client;
    private $token;
    private $ideolve_URL;
    private $workspacelist;
    private $isinitialised;
    /**
     *  Default constructor for ideolve connnector 
     *
     * @param string $rc roundcube object
     * @param string $user Username for ideolve Auth.
     * @param string $pass Password for ideolve Auth.
     */
    public function __construct($rc, $user = null, $pass = null)
    {
	$this->rc = $rc;
        $this->ideolveuser = $user ;
        $this->ideolveuserpassword = $pass;
	
	$this->ideolveserver = $this->rc->config->get ('ideolve_server_url');
	if( $this->ideolveuser == null )
		$this->ideolveuser = $this->rc->user->data['username'];
	if( $this->ideolveuserpassword == null )
	        $this->ideolveuserpassword = $this->rc->decrypt($_SESSION['password']);
     }
     public function init()
     {
        $RESULT=false;
        while( true )
        {
		if( !$this->initIdeolveTokenDB() )
		{
			rcube::write_log('errors', "Ideolve: Token DB init failed" );
			break;
		}
		if( !$this->initIdeolveClient() )
		{
			rcube::write_log('errors', "Ideolve: Ideolve client init failed" );
			break;
		}
		if( !$this->getIdeolveAuthToken() )
		{
			rcube::write_log('errors', "Ideolve: failed to get token from ideolve" );
			break;
		}
		$this->formIdeolveAccessUrl();
     	
		$this->isinitialised = true;
                $RESULT=true;
                break;
        }
        return $RESULT ;
      }
	/*
Create a json of the following format.
{"email":"logged in user","clientId":"client id of the active session","authToken":"active auth token"}
For example : {"email":"kaustubh@test.int","clientId":"17575808-37b3-4552-bcea-8d846650e8d2","authToken":"MwobzGjgE3ILRyF3"}
Generate a base64 encoded string of the above json
Open the url
<server-ip>/thinkshop/display/Thinkshop.html#?q=<base 64 encoded string generated by json>
For example:
http://52.221.9.35/thinkshop/display/Thinkshop.html#?q=eyJlbWFpbCI6ImthdXN0dWJoQHRlc3QuaW50IiwiY2xpZW50SWQiOiIxNzU3NTgwOC0zN2IzLTQ1NTItYmNlYS04ZDg0NjY1MGU4ZDIiLCJhdXRoVG9rZW4iOiJNd29iekdqZ0UzSUxSeUYzIn0=
	*/
      private function formIdeolveAccessUrl( )
      {
	$authInfo[ "authToken" ] = $this->token;
	$authInfo[ "email" ] = $this->ideolveuser;
	$authInfo[ "clientId"] = $this->ideolve_client->getClientId();

	$authInfoJson = json_encode( $authInfo );
	$encodedAuthInfo = base64_encode( $authInfoJson );
	$this->ideolve_URL = $this->ideolveserver."/thinkshop/display/Thinkshop.html#?q=".$encodedAuthInfo;
	
      }

      public function getIdeolveAccessUrl()
      {   
	// TODO Assert isinitialised
        return $this->ideolve_URL;
      }
     //*******************************************************************
    // Token Cache Table Database connector
    private function initIdeolveTokenDB()
    {
        $RESULT=false;
        while( true )
        {
	        if( !$this->initIdeolveTokenTable() )
        	     break;

                $RESULT=true;
                break;
        }
        return $RESULT ;

    }

    private function initIdeolveTokenTable()
    {
              if(!class_exists("ideolve_tokencache_db")) {
                        require_once(dirname(__FILE__).'/ideolve_token_cache_db.php');
                }

	$this->ideolve_tokencache_db = new ideolve_tokencache_db( $this->rc );
	return $this->ideolve_tokencache_db->isInitialised();
    }

    private function getUserTokenFromDB()
    {
	$RESULT=false;
        while( true )
	{
		if( !$this->ideolve_tokencache_db->get( $this->token ) )
			break;
		if( !$this->isValidToken() )
			break;
               $RESULT=true;
                break;
        }
        return $RESULT ;
    }

    private function saveTokenInDBCache( $token )
    {
	// connect rcdb
	// query ideolve token table update ideolvetoken set token=$token where user='rcuser';
	// if update failed insert record
	$this->ideolve_tokencache_db->save( $this->ideolveuser, $token );
    }

    //**********************************************************
    // Ideolve client 
    private function initIdeolveClient()
    {
	$RESULT=false;
	while( true )
	{
		

        	if(!class_exists("ideolve_client")) {
            		require_once(dirname(__FILE__).'/ideolve_client.php');
        	}
        	$this->ideolve_client = new ideolve_client($this->ideolveserver, $this->ideolveuser, $this->ideolveuserpassword);

		if( !$this->ideolve_client->init() )
			break;

		 $RESULT=true;
                break;
        }
        return $RESULT ;

    }

    private function getIdeolveAuthToken()
    {
        $RESULT=false;
        while( true )
        {

		if( !$this->getUserTokenFromDB() )
		{
			if(!$this->getValidTokenFromIdeolveServer())
				break;
		}
		
		$this->saveTokenInDBCache( $this->token ); // ignore write to cache failure - it can be cached latter.
	
		$RESULT=true;
		break;
	}
	return $RESULT ;
    }   

    private function isValidToken( )
    {
	$RET=false;
	while( true )
	{
		if( $this->token == "" )
			break;
		
		if( !$this->validateIdeolveTokenByURL( $this->token ) )
			break;
	
		$RET = true;
		break;
	}
	
	return $RET;
    }
    
    private function validateIdeolveTokenByURL( $token )
    {
	$RET=false;
	while( true )
	{

		if( !$this->ideolve_client->validateIdeolveToken($token) )
			break;

		$RET=true;
		break;
	}
	return $RET;

    }

    private function getValidTokenFromIdeolveServer()
    {
        $RET=false;
        while( true )
        {

                if( !$this->ideolve_client->getIdeolveToken($this->token) )
			break;
                rcube::write_log('errors', "Ideolve: Got Auth token ".$this->token );
	
		if( !$this->isValidToken() )
		{
			break;
		}
                $RET=true;
                break;
        }
        return $RET;

    }


} // end of class ideolve_connector 


?>
