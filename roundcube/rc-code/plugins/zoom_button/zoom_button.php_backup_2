<?php

class zoom_button extends rcube_plugin
{
	private $zoomurl;
   	private $username;
   	private $password;
   	private $host;
   	private $uname;
   	private $domain;
   	private $debug_flag;
   	private $timeout;
   	private $connectiontimeout;
   	private $clientid;
   	private $clientsecret;
   	private $maildomainzoomintegration;
   	private $mailclientzoomintegration;

        function init()
        {
                $this->load_config();

                $this->rc = rcube::get_instance();
                $this->rcmail = rcmail::get_instance();

                //$this->include_stylesheet($this->local_skin_path() . '/zoom_button.css');

		###get values for WS auth
    		$this->username= $this->rc->user->data['username'];
    		$this->password=$this->rc->decrypt($_SESSION['password']);

		###get login user email id and extract username and domain from it
    		if ( $identity = $this->rc->user->get_identity() ){
        		list($name,$domain) = explode('@', $identity['email']);
        		$this->uname = $name;
        		$this->domain = $domain;
    		}else{
        		list($name,$domain) = explode('@', $this->rc->user->data['username']);
        		$this->uname = $name;
        		$this->domain = $domain;
    		}


    		###get host name from conf  file
    		$this->host = $this->rc->config->get('default_host');
	
		// get debug flag - enable/disable debugging
     		$this->debug_flag = $this->rc->config->get('zoom_debug'); 
     		$this->pe_write_log('zoom - START');

                $this->add_texts('localization/');

		$this->timeout=$this->rc->config->get('ws_timeout');
     		$this->connectiontimeout=$this->rc->config->get('ws_connectiontimeout');
     		$this->maildomainzoomintegration = $this->domain_properties();
     		$this->mailclientzoomintegration = $this->user_properties();

		if($this->maildomainzoomintegration == "Enabled" &&  $this->mailclientzoomintegration == "Enabled")
    		{

			//zoom button to lauch micro app
                	$this->add_button(array(
                		'label'      => 'zoom_button.zoom',
                		'type'       => 'link',
                		'href'       => './?_task=zoom&_action=plugin.launchzoomapp',
                		'target'     => '_blank',
                		'class'      => 'button-zoom',
                		'classsel'   => 'button-zoom button-selected',
                        	'innerclass' => 'button-inner',
                 	), 'taskbar');

			//register method to be called when clicking on zoom button to lauch micro app
                	$this->register_action('plugin.launchzoomapp', array($this, 'launch_zoom_app'));

			$this->add_hook('settings_actions', array($this, 'settings_actions'));
        		$this->register_action('plugin.zoom', array($this, 'zoom_init'));
        		$this->register_action('plugin.zoom-save', array($this, 'zoom_save'));
        		$this->add_texts('localization/', array('zoom','noclientid','noclientsecret'));
        		$this->rc->output->add_label('zoom_button.zoom');
        		$this->include_script('zoom_button.js');

		}
        }

	###get mailclientzoomintegration property from domain level
	function domain_properties()
  	{
    		//call WS and check if zoom is enabled for domain
    		$url = 'http://'.$this->host.':8080/orchestration.ws/domain/'.$this->domain.'?properties=mailclientzoomintegration&absolutevalues=false';
    		$this->pe_write_log('URI to call GET WS to get domain mailclientzoomintegration : "'.$url.'"');

    		$ch = curl_init($url);
    		curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);
    		curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $this->connectiontimeout);
    		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    		curl_setopt($ch, CURLOPT_USERPWD, "$this->username:$this->password");
    		curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    		curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
    		$data = curl_exec($ch);

    		$httpcode = curl_getinfo($ch,CURLINFO_HTTP_CODE);
  	 	$this->pe_write_log('WS Called with return code(domain) : "'.$httpcode.'"');
    		curl_close($ch);

    		$decodejson=json_decode($data,true);
    		$this->pe_write_log('JSON response(domain) : "'.$data.'"');
    		$this->maildomainzoomintegration = $decodejson['result']['mailclientzoomintegration'];

    		return $this->maildomainzoomintegration;
  	}

	### get mailclientzoomintegration property from user level
	function user_properties() 
  	{
    		//call WS and check if zoom is enabled for user
    		$url = 'http://'.$this->host.':8080/orchestration.ws/domain/'.$this->domain.'/user/'.$this->uname.'?properties=mailclientzoomintegration';
    		$this->pe_write_log('URI to call GET WS to get user mailclientzoomintegration : "'.$url.'"');

    		$ch = curl_init($url);
    		curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);
    		curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $this->connectiontimeout);
    		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
   	 	curl_setopt($ch, CURLOPT_USERPWD, "$this->username:$this->password");
    		curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    		curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
    		$data = curl_exec($ch);

    		$httpcode = curl_getinfo($ch,CURLINFO_HTTP_CODE);
    		$decodejson=json_decode($data,true);

    		$this->pe_write_log('JSON response(user) : "'.$data.'"');
    		$this->pe_write_log('WS Called with return code(user) : "'.$httpcode.'"');

    		curl_close($ch);
    		$decodejson=json_decode($data,true);
    		$this->mailclientzoomintegration=$decodejson['result']['mailclientzoomintegration'];

    		return $this->mailclientzoomintegration;
  	}	

	###call WS and update zoom id and secret into ldap using WS
	function zoom_save(){

		$this->pe_write_log('zoom save - START');
   		$this->add_texts('localization/');
    		$this->register_handler('plugin.body', array($this, 'zoom_form'));
    		$this->rc->output->set_pagetitle($this->gettext('zoom'));
    		$this->pe_write_log('Input parameters :');
    		$this->clientid = trim(rcube_utils::get_input_value('_clientid', rcube_utils::INPUT_POST, true));
    		$this->pe_write_log('input zoom client id : "'.$this->clientid.'"');
    		$this->clientsecret = trim(rcube_utils::get_input_value('_clientsecret', rcube_utils::INPUT_POST, true));
    		$this->pe_write_log('input zoom client secret : "'.$this->clientsecret.'"');

    		if($this->clientid == "" || $this->clientsecret == "")
        		$this->rc->output->command('display_message', $this->gettext('nodata'), 'error');
    		else{
	
        		//check if user has permission to save zoom credentials
        		if($this->maildomainzoomintegration== "Enabled" &&  $this->mailclientzoomintegration == "Enabled")
        		{
            			$url='http://'.$this->host.':8080/orchestration.ws/domain/'.$this->domain.'/user/'.$this->uname.'?&op=replace';
            			$post = '{  "mailclientzoomclientkey": "'.$this->clientid.'", "mailclientzoomclientsecretkey": "'.$this->clientsecret.'"}';
 	    			$this->pe_write_log('URI to call PUT WS to add zoom credentials : "'.$url.'"');
            			$this->pe_write_log('JSON passed for WS : "'.$post.'"');
          
            			$ch = curl_init($url);
            			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            			curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
            			curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
            			curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);
            			curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $this->connectiontimeout);
            			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            			curl_setopt($ch, CURLOPT_USERPWD, "$this->username:$this->password");
            			curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
            			curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));

       				$response = curl_exec($ch);

            			$httpcode = curl_getinfo($ch,CURLINFO_HTTP_CODE);
            			$this->pe_write_log('WS Called with return code : "'.$httpcode.'"');
            			$this->pe_write_log('JSON response: "'.$response.'"');
              
            			curl_close($ch);

            			if($httpcode==200){
                			$this->rc->output->command('display_message', $this->gettext('successfullysaved'), 'confirmation');
            			}
            			else{
                			$this->rc->output->command('display_message', $this->gettext('unsuccessfullysaved'), 'error');
            			}
        		}
        		else{
            			$this->rc->output->command('display_message', $this->gettext('nodata'), 'error');
        		}
    		}
    		
		$this->pe_write_log('zoom save - END');
    		$this->rc->overwrite_action('plugin.zoom');
    		$this->rc->output->send('plugin');
  	} 

	###to show zoom tab in setting
	function settings_actions($args){
    		$args['actions'][] = array(
      		'action' => 'plugin.zoom',
      		'class' => 'zoom',
      		'label' => 'zoom_button.zoom',
      		'domain' => 'zoom',
    		);
    	
		return $args;
  	}

	 function zoom_init(){
	
    		$this->add_texts('localization/');
    		$this->register_handler('plugin.body', array($this, 'zoom_form'));
    		$this->rc->output->set_pagetitle($this->gettext('zoom'));
    		$this->rc->output->send('plugin');
  	}
 
	
 	###get mailclientzoomclientkey and mailclientzoomclientsecretkey property for the user
	function zoom_properties(){
		$url='http://'.$this->host.':8080/orchestration.ws/domain/'.$this->domain.'/user/'.$this->uname.'?properties=mailclientzoomclientkey,mailclientzoomclientsecretkey';
    		$this->pe_write_log('URI to get zoom credentials : "'.$url.'"');

    		$ch = curl_init($url);
    		curl_setopt($ch, CURLOPT_TIMEOUT, $this->timeout);
    		curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $this->connectiontimeout);
    		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    		curl_setopt($ch, CURLOPT_USERPWD, "$this->username:$this->password");
    		curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    		curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
    		$data = curl_exec($ch);

    		$httpcode = curl_getinfo($ch,CURLINFO_HTTP_CODE);
    		curl_close($ch);

    		$decodejson=json_decode($data,true);
    		$this->pe_write_log('JSON response : "'.$data.'"');
    		$this->pe_write_log('WS Called with return code : "'.$httpcode.'"');

    		return $decodejson;

  	}


	//zoom form for get zoom credentials
  	function zoom_form(){

    		$this->pe_write_log('zoom form - START');
    		$decodejson = $this->zoom_properties();    

    		$mailclientzoomclientkey =$decodejson['result']['mailclientzoomclientkey'];
    		$mailclientzoomclientsecretkey =$decodejson['result']['mailclientzoomclientsecretkey'];

    		if(method_exists($this->rc,'imap_connect')) $this->rc->imap_connect();
    		
		else $this->rc->storage_connect();
    			$table = new html_table(array('cols' => 2, 'class' => 'propform cols-sm-6-6'));

    			$table->add('title', rcube_utils::rep_specialchars_output($this->gettext('clientid').":"), 'html');
    			$inputfield = new html_inputfield(array('name' => '_clientid', 'id' => 'clientid'));
    			$table->add('', $inputfield->show("$mailclientzoomclientkey"));

    			$table->add('title', rcube_utils::rep_specialchars_output($this->gettext('clientsecret').":"), 'html');
    			$inputfield = new html_inputfield(array('name' => '_clientsecret', 'id' => 'clientsecret'));
    			$table->add('', $inputfield->show("$mailclientzoomclientsecretkey"));

    			$user = $this->rc->user;
    			$arr_prefs = $user->get_prefs();
    			$i = 1;
    			$table2 = new html_table(array('cols' => 2));

	  		if ($this->rc->config->get('skin') == 'elastic') {
				$out = html::tag('fieldset', array('class' => 'main'),
		  		html::tag('legend', null, $this->gettext('mainoptions')). 
		  		$table->show() .
		  		html::p(null,
		    			$this->rc->output->button(array(
			  		'command' => 'plugin.zoom-save',
			  		'type' => 'input',
			  		'class' => 'button mainaction',
			  		'label' => 'save'
		    			))
		  			)
				);

	  		}
  		else {
                	$out = html::div(array('class' => 'box'),
                  	html::div(array('id' => 'prefs-title', 'class' => 'boxtitle'), $this->gettext('zoom')).
                  	html::div(array('class' => 'boxcontent'), $table->show() .
                  	html::p(null,
                        	$this->rc->output->button(array(
                          	'command' => 'plugin.zoom-save',
                          	'type' => 'input',
                          	'class' => 'button mainaction',
                          	'label' => 'save'
                  		)))));
	 		} 

    		$this->rc->output->add_gui_object('zoomform', 'zoom-form');

    		$form = $this->rc->output->form_tag(array(
        	'id' => 'zoom-form',
        	'name' => 'zoom-form',
        	'method' => 'post',
    		'class' => 'propform cols-sm-6-6',
          		'action' => './?_task=settings&_action=plugin.zoom-save',
      		), $out);

      		$this->pe_write_log('zoom form - END');	
    		if ($this->rc->config->get('skin') == 'elastic') {
      			return html::div(array('class' => 'formcontent'), $form);
    		} else {
      			return $form;
    		}
  	}

  	//function for writing logs after checking if debug flag is set
  	function pe_write_log($log){
      		if ($this->debug_flag){
          		rcube::write_log('zoom', $log);
      		}
  	}	

        function launch_zoom_app(){
		
		$url = rcube::get_instance()->config->get('initaccess_token_url');
		
		###call method and get user property
		$decodejson = $this->zoom_properties();
                $mailclientzoomclientkey =$decodejson['result']['mailclientzoomclientkey'];
                $mailclientzoomclientsecretkey =$decodejson['result']['mailclientzoomclientsecretkey'];

                $user=$this->uname;
                $domain=$this->domain;
                $zoomclinetid=$mailclientzoomclientkey;
                $zoomsecretkey=$mailclientzoomclientsecretkey;

		###call API and get init access token to lauch zoom micro app
                $ch = curl_init($url);

                $data='{
                        "user": "'.$user.'",
                        "domain": "'.$domain.'",
                        "launcher": "bayav4",
                        "microApp": "zoom",
                        "zoomclinetid": "'.$zoomclinetid.'",
                        "zoomsecretkey": "'.$zoomsecretkey.'"
                }';

                curl_setopt($ch, CURLOPT_POSTFIELDS, $data);

                $headers = [];
                $headers[] = 'Content-Type:application/json';
		$headers[] = rcube::get_instance()->config->get('init_token_key');
                curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

                $result = curl_exec($ch);
                $httpcode = curl_getinfo($ch,CURLINFO_HTTP_CODE);

                curl_close($ch);

                $decodejson=json_decode($result,true);

                ###parse json and get initaccesstoken.
                $initaccestoken=$decodejson["initAccessToken"];

                ####lauch zoom micro app new new tab
		$redirectzoomurl = rcube::get_instance()->config->get('redirect_zoom_url');
		$zoomredirecturl= $redirectzoomurl .$initaccestoken;

                header("Location: $zoomredirecturl");

                $rcube::console("Inside init");
        }

}

?>
