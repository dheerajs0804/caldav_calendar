/**
 * Roundcube Text Editor Widget class
 * @constructor
 */
function rcube_text_editor(config, id)
{
  var ref = this,
    selector = '#' + ($('#' + id).is('.mce_editor') ? id : 'fake-editor-id'),
    abs_url = location.href.replace(/[?#].*$/, '').replace(/\/$/, ''),
    conf = {
      language: config.lang,
    };

    ///toggle custom button(html2plain or plain2html)
    FroalaEditor.DefineIcon('plaintext', {NAME: 'plus', SVG_KEY: 'close'});
    FroalaEditor.RegisterCommand('plaintext', {
       title: 'Plain Text',
       tooltip: rcmail.gettext('plaintoggle'),
       icon: 'plaintext',
       focus: true,
       undo: true,
       refreshAfterCallback: true,
       callback: function (e) {
	   var ed = this;
           var parent = document.getElementById('composebodycontainer');
	   if (rcmail.command('toggle-editor', {id: id, html: false}, '', e.originalEvent)) {
                  parent.classList.remove('ishtml');
	   }
       }
   });

    ///custom button for applying table border
    FroalaEditor.DefineIcon('setBorder', {NAME: 'add', SVG_KEY: 'add'});
    FroalaEditor.RegisterCommand('setBorder', {
    title: 'Add Border',
    focus: true,
    undo: true,
    refreshAfterCallback: true,
    callback: function() {
     var myframe = document.getElementById("composebody_ifr");
     var body = myframe.contentWindow.document.getElementsByTagName("BODY")[0];
     var cell = body.querySelectorAll('td');
     var table = body.querySelectorAll('table');
     for (var i = 0; i < cell.length; i++) {
       cell[i].style.border = '1px solid rgb(115, 115, 115)';
     }
     for (var i = 0; i < table.length; i++) {
       table[i].border = '1';
       table[i].style.borderCollapse = 'collapse';
     }
    } 
  });


  ///Froala Editor initilization call
  var froalaEditor = init_froala(selector); 

  ///Froala Edidtor intilization function
  function init_froala(selector){
    var froalaEditor = new FroalaEditor(selector,{
	key: "1CC3kC5B5F4A5A3E4bHIMFF1EWBXIJb1BZLZFh1i1MXQLjE4C3F3I3B4A5C4E3A3H3==",
        theme: 'royal',
        inlineMode: false,
	//toolbarSticky: true,
	useClasses: false,
        iframe: true,
        iframeStyle: 'body{position:relative;z-index:2;}pre{white-space:pre-wrap;word-wrap:break-word;}',
        attribution: false,
        heightMin: 300,
        heightMax: 450,
        charCounterCount: false,
        quickInsertEnabled: false,
	spellcheck: true,
        indexOf: key => Object.keys(this).indexOf(key),
        toolbarButtons:{
          'moreText': {
                'buttons': ['plaintext','|', 'bold', 'italic', 'underline','fontFamily', 'fontSize', 'textColor', 'strikeThrough', 'subscript', 'superscript', 'backgroundColor', 'inlineClass', 'inlineStyle', 'clearFormatting'],
		 'buttonsVisible': 6
             },
          'moreParagraph': {
                'buttons': ['align','formatOL', 'formatUL', 'paragraphFormat', 'paragraphStyle', 'lineHeight', 'outdent', 'indent', 'quote']
            },
          'moreRich': {
                'buttons': ['insertImage','insertFile', 'insertTable','insertVideo', 'emoticons', 'fontAwesome', 'specialCharacters', 'embedly', 'insertLink', 'insertHR']
            },
          'moreMisc': {
                'buttons': ['undo', 'redo', 'fullscreen', 'print', 'getPDF', 'spellChecker', 'selectAll', 'html', 'help'],
                'align': 'right',
                'buttonsVisible': 3
           }
        }, 
        toolbarButtonsMD: ['plaintext','|', 'bold', 'italic', 'fontFamily', 'fontSize', 'align', 'insertImage', 'insertFile' ,'undo', 'redo'],

        toolbarButtonsSM: ['plaintext','|', 'bold', 'italic', 'fontFamily', 'fontSize', 'align', 'insertImage', 'insertFile' ,'undo', 'redo'],

        toolbarButtonsXS: ['plaintext','|', 'bold', 'italic', 'underline','fontFamily', 'fontSize','align', 'undo', 'redo'],

        pluginsEnabled: ['align', 'colors','codeView', 'draggable','emoticons', 'entities', 'file', 'filesManager', 'fontAwesome', 'fontFamily', 'fontSize', 'fullscreen', 'image', 'imageManager', 'inlineStyle', 'inlineClass', 'lineBreaker', 'lineHeight', 'link', 'lists', 'paragraphFormat', 'paragraphStyle', 'quickInsert', 'quote', 'save','specialCharacters','spellChecker', 'table', 'url', 'video', 'wordPaste'],

	pasteAllowLocalImages: true,
	pasteAllowedStyleProps: [ 'background', 'background-color', 'border', 'color', 'font-size', 'font-style', 'font-weight', 'text-decoration' ],

	wordAllowedStyleProps: ['font-family', 'font-size', 'background', 'color', 'width', 'text-align', 'vertical-align', 'background-color', 'padding', 'margin', 'height', 'margin-top', 'margin-left', 'margin-right', 'margin-bottom', 'text-decoration', 'font-weight', 'font-style', 'text-indent', 'border', 'border-.*'],

	imageAddNewLine: true,
	imagePasteProcess: true,
	imageSplitHTML: true,
	imageMaxSize: 5 * 1024 * 1024,
	imageAllowedTypes: ['jpeg', 'jpg', 'png', 'webp', 'gif', 'svg+xml'],	   
	imageDefaultWidth: 300,

	imageUploadParam:'file',
        imageDefaultAlign: 'center',
        imageDefaultDisplay: 'block',
        imageInsertButtons: ['imageUpload', 'imageByURL'],
        imageOutputSize: true,

	imageUploadMethod: 'POST',
	imageUploadParams: {id: 'my_editor'},
	imageUploadURL: './program/js/froala/upload_image.php',

	
        videoInsertButtons:['videoBack', '|', 'videoUpload', 'videoByURL', 'videoEmbed'],	
	tableEditButtons: ['tableHeader', 'tableRemove', '|', 'tableRows', 'tableColumns', 'tableStyle', '-', 'tableCells', 'tableCellBackground', 'tableCellVerticalAlign', 'tableCellHorizontalAlign', 'tableCellStyle', 'setBorder'],
	events: {
	    'initialized': function () {
		ref.setup(this);
            },

	    "image.beforeUpload": function(images) {
                if(config.mode == 'identity'){
                   var editor = this;
                   if (images.length && images[0].size <= 64000) {
                        var reader = new FileReader();
                        reader.onload = function(e) {
                                var result = e.target.result;
                                editor.image.insert(result, null, null, editor.image.get());
                        };
                        reader.readAsDataURL(images[0]);
                   }else{
			alert("Image cannot be greater than 64 KB");
		   }
                   editor.popups.hideAll();
                   return false;
                }
            },

	     ///inline image insert into the mailbody
	    'image.uploaded': function (response) {
		var i,elem, editor = this;
		setTimeout(function() {img_insert();}, 1000);
		function img_insert(){
		var img_response = JSON.parse(response);
                for (i in rcmail.env.attachments) {
		     if(rcmail.env.attachments[i].name != img_response.name){
			continue;
		     }
 
                     elem = image_url(i, rcmail.env.attachments[i]);
                     if (elem && (rcmail.env.attachments[i].name == img_response.name)) {
                         editor.image.insert(elem, null, null, editor.image.get());
                         return false;
                     }
                }

                function image_url(file_id, file){
 		     if (!file.complete || !file.mimetype) {
     			 return;
    		     }
                     var path = rcmail.env.comm_path + '&_from=' + rcmail.env.action,
                     action = rcmail.env.compose_id ? '&_id=' + rcmail.env.compose_id + '&_action=display-attachment' : '&_action=upload-display',
                     href = path + action + '&_file=' + file_id;
                     return href;
                  }
		}
                return false;
	    },
	     ///inline image error 
	    'image.error': function (error, response){
		var editor = this;
		var $popup = editor.popups.get('image.insert');
		var $layer = $popup.find('.fr-image-progress-bar-layer');
		if(error.code == 1)
		   $layer.find('h3').text(error.message);	
		else if (error.code == 2)
		   $layer.find('h3').text(error.message);
		else if (error.code == 3)
                   $layer.find('h3').text(error.message);
		else if (error.code == 4)
                   $layer.find('h3').text(error.message);
                else if (error.code == 5)
                   $layer.find('h3').text(error.message);
		else if(error.code == 6)
                   $layer.find('h3').text(error.message);
                else if (error.code == 7)
		   $layer.find('h3').text(error.message);
	    }
         }
     });
     return froalaEditor;
   }


    $.extend(conf, {froalaEditor});

    rcmail.triggerEvent('editor-init', {config: conf, ref: ref, id: id});

    // textarea identifier
    this.id = id;

    // reference to active editor (if in HTML mode)
    this.editor = null;

    ///froala editor setup with inilization
    this.setup = function(editor) {
       this.editor = editor;
       var myframe = document.getElementsByTagName("iframe")[0];
       myframe.id = "composebody_ifr";
       document.getElementById('composebody_ifr').contentDocument.body.setAttribute("id","froalaEditor");
       document.getElementById('composebody_ifr').contentDocument.body.setAttribute("data-id","composebody");

       var ed = ($("[name='_is_html']").val() == '1') ? true : false;
       if(rcmail.env.action == 'compose'){
         if(!ed){
           document.getElementsByClassName('fr-box')[0].style.display = 'none';
           document.getElementById('composebody').style.display = 'block';
           document.getElementsByClassName('editor-toolbar')[0].style.display = 'block';
         }
         else
           document.getElementsByClassName('editor-toolbar')[0].style.display = 'none';
       }
       else{
         document.getElementsByClassName('editor-toolbar')[0].style.display = 'none';
       }
       var css = {},
         elem = rcube_find_object('_from'),
         fe = rcmail.env.compose_focus_elem;
       var myframe = document.getElementById("composebody_ifr");
       var body = myframe.contentWindow.document.getElementsByTagName("BODY")[0];

       if (rcmail.env.default_font)
         css['font-family'] = rcmail.env.default_font;

       if (rcmail.env.default_font_size)
         css['font-size'] = rcmail.env.default_font_size;

       if (css['font-family'] || css['font-size'])
         $(body).css(css);

       if (elem && elem.type == 'select-one') {
        // insert signature (only for the first time)
          if (!rcmail.env.identities_initialized){
             rcmail.change_identity(elem);
          }
       } 
   }; 


  // focus the editor
  this.focus = function()
  {
    $(this.editor || ('#' + this.id)).focus();
    this.force_focus = false;
  };

  // switch html/plain mode
  this.toggle = function(ishtml, noconvert)
  {
    var curr, content, result,
      // these non-printable chars are not removed on text2html and html2text
      // we can use them as temp signature replacement
      sig_mark = "\u0002\u0003",
      input = $('#' + this.id),
      signature = rcmail.env.identity ? rcmail.env.signatures[rcmail.env.identity] : null,
      is_sig = signature && signature.text && signature.text.length > 1;
    

    if (ishtml) {
      content = input.val();
      // replace current text signature with temp mark
      if (is_sig) {
        content = content.replace(/\r\n/, "\n");
        content = content.replace(signature.text.replace(/\r\n/, "\n"), sig_mark);
      }

      var init_editor = function(data) {
        // replace signature mark with html version of the signature
        if (is_sig)
          data = data.replace(sig_mark, '<div id="_rc_sig">' + signature.html + '</div>');

        ref.force_focus = true;
        input.val(data);
	try{
	   document.getElementsByClassName('fr-box')[0].style.display = 'block';
	}catch(error){
	   this.editor = init_froala('#'+id);
	}
        document.getElementById('composebody').style.display = 'none';
	document.getElementsByClassName('editor-toolbar')[0].style.display = 'none';
      };

      // convert to html
      if (!noconvert) {
        result = rcmail.plain2html(content, init_editor);
      }
      else {
        init_editor(content);
        result = true;
      }
    }
    else if (this.editor) {
      if (is_sig) {
        // get current version of signature, we'll need it in
        // case of html2text conversion abort
	var myframe = document.getElementById("composebody_ifr");
        var body = myframe.contentWindow.document.getElementsByTagName("BODY")[0];
        var sigElem = body.querySelector("#_rc_sig");

        if (curr = sigElem)
          curr = curr.innerHTML;

        // replace current signature with some non-printable characters
        // we use non-printable characters, because this replacement
        // is visible to the user
        // doing this after getContent() would be hard
	$('#_rc_sig').html(content)
      }

      // get html content
      content = this.editor.html.get();
      var init_plaintext = function(data) {
	try{
	   this.editor.destroy();
	}catch(error){
	   document.getElementsByClassName('fr-box')[0].style.display = 'none';
	}
	document.getElementById('composebody').style.display = 'block';
	document.getElementsByClassName('editor-toolbar')[0].style.display = 'block';
        //ref.editor = null;

        // replace signture mark with text version of the signature
        if (is_sig)
          data = data.replace(sig_mark, "\n" + signature.text);

        input.val(data).focus();
        rcmail.set_caret_pos(input.get(0), 0);
      };

      // convert html to text
      if (!noconvert) {
        result = rcmail.html2plain(content, init_plaintext);
      }
      else {
        init_plaintext(input.val());
        result = true;
      }

      // bring back current signature
      if (!result && curr)
        this.editor.dom.setHTML('_rc_sig', curr);
    }
    return result;
  };

  this.spellcheck_start = function()
  {
    if (this.editor) {
      //tinymce.execCommand('mceSpellCheck', true);
      this.spellcheck_observer();
    }
    else if (this.spellchecker && this.spellchecker.spellCheck) {
      this.spellchecker.spellCheck();
    }
  };

  // stop spellchecker
  this.spellcheck_stop = function()
  {
    var ed = this.editor;

    if (ed) {
      if (this.spellcheck_active) {
        //ed.execCommand('mceSpellCheck', false);
        this.spellcheck_observer();
      }
    }
    else if (ed = this.spellchecker) {
      if (ed.state && ed.state != 'ready' && ed.state != 'no_error_found')
        $(ed.spell_span).trigger('click');
    }
  };

  // spellchecker state
  this.spellcheck_state = function()
  {
    var ed;

    if (this.editor)
      return this.spellcheck_active;
    else if ((ed = this.spellchecker) && ed.state)
      return ed.state != 'ready' && ed.state != 'no_error_found';
  };

  // resume spellchecking, highlight provided mispellings without a new ajax request
  this.spellcheck_resume = function(data)
  {
    var ed = this.editor;

    if (ed) {
      ed.plugins.spellchecker.markErrors(data);
    }
    else if (ed = this.spellchecker) {
      ed.prepare(false, true);
      ed.processData(data);
    }
  };

  // get selected (spellchecker) language
  this.get_language = function()
  {
    return rcmail.env.spell_lang;
  };

  // set language for spellchecking
  this.set_language = function(lang)
  {
    var ed = this.editor;

    if (ed) {
      // TODO: this has no effect in recent Tiny versions
      ed.settings.spellchecker_language = lang;
    }
    if (ed = this.spellchecker) {
      ed.setCurrentLanguage(lang);
    }

    rcmail.env.spell_lang = lang;
  };

  // replace selection with text snippet
  // input can be a string or object with 'text' and 'html' properties
  this.replace = function(input)
  {
    var format, ed = this.editor;
    var istrue = ($("[name='_is_html']").val() == '1') ? true : false;
    if (!input)
      return false;

    // insert into froala editor
    if (istrue) {
      //ed.getWin().focus(); // correct focus in IE & Chrome
      if ($.type(input) == 'object' && ('html' in input)) {
        input = input.html;
        format = 'html';
      }
      else {
        if ($.type(input) == 'object')
          input = input.text || '';

        input = rcmail.quote_html(input).replace(/\r?\n/g, '<br/>');
        format = 'text';
      }
	ed.events.focus();
	ed.html.insert(input);
      //ed.selection.setContent(input, {format: format});
    }
    // replace selection in compose textarea
    else if (ed = rcube_find_object(this.id)) {
      var selection = rcmail.get_input_selection(ed),
        value = ed.value,
        pre = value.substring(0, selection.start),
        end = value.substring(selection.end, value.length);
      if ($.type(input) == 'object')
        input = input.text || '';

      // insert response text
      ed.value = pre + input + end;

      // set caret after inserted text
      rcmail.set_caret_pos(ed, selection.start + input.length);
      ed.focus();
    }
  };

  // Fill the editor with specified content
  // TODO: support format conversion
  this.set_content = function(content)
  {
    if (this.editor) {
      this.editor.setContent(content);
      this.editor.getWin().focus();
    }
    else if (ed = rcube_find_object(this.id)) {
      $(ed).val(content).focus();
    }
  };

  // get selected text (if no selection returns all text) from the editor
  this.get_content = function(args)
  {
    var sigstart, text = '', strip = false,
      defaults = {refresh: true, selection: false, nosig: false, format: 'html'};
    var ed = this.editor, istrue = ($("[name='_is_html']").val() == '1') ? true : false;

    if (!args)
      args = defaults;
    else
      args = $.extend(defaults, args);

    // apply spellcheck changes if spell checker is active
    if (args.refresh) {
      this.spellcheck_stop();
    }
    // get selected text from Froala editor
    if (ed && istrue) {
      if (args.selection){
        //text = ed.selection.getContent({format: args.format});
	text = ed.html.get();
        if(args.format == 'text'){
            text = getInnerText(text);
        }
      }

      if (!text) {
        //text = ed.getContent({format: args.format});
	  text = ed.html.get(true);
        // @todo: strip signature in html mode
        strip = args.format == 'text';
      }
    }
    // get selected text from compose textarea
    else if (ed = rcube_find_object(this.id)) {
      if (args.selection) {
        text = rcmail.get_input_selection(ed).text;
      }

      if (!text) {
        text = ed.value;
        strip = true;
      }
    }
    // strip off signature
    // @todo: make this optional
    if (strip && args.nosig) {
      sigstart = text.indexOf('-- \n');
      if (sigstart > 0) {
        text = text.substring(0, sigstart);
      }
    }
    return text;
  };

   ///convert editor html text to plain text for creating quick response
   function getInnerText(html) {
      html = html.replace(/\n/g, "");
      html = html.replace(/\t/g, "");
      html = html.replace(/<\/td>/g, "\t");
      html = html.replace(/<\/table>/g, "\n");
      html = html.replace(/<\/tr>/g, "\n");
      html = html.replace(/<\/p>/g, "\n");
      html = html.replace(/<\/div>/g, "\n");
      html = html.replace(/<\/h>/g, "\n");
      html = html.replace(/<br>/g, "\n");
      html = html.replace(/<br( )*\/>/g, "\n");
      var dom = (new DOMParser()).parseFromString('<!doctype html><body>' + html, 'text/html');
      return dom.body.textContent;
   }


  // change user signature text
  this.change_signature = function(id, show_sig)
  {
    var position_element, cursor_pos, p = -1,
      input_message = $('#' + this.id),
      message = input_message.val(),
      sig = rcmail.env.identity;
   var ed = ($("[name='_is_html']").val() == '1') ? true : false;
    if (!ed) { // plain text mode
      // remove the 'old' signature
      if (show_sig && sig && rcmail.env.signatures && rcmail.env.signatures[sig]) {
        sig = rcmail.env.signatures[sig].text;
        sig = sig.replace(/\r\n/g, '\n');

        p = rcmail.env.top_posting ? message.indexOf(sig) : message.lastIndexOf(sig);
        if (p >= 0)
          message = message.substring(0, p) + message.substring(p+sig.length, message.length);
      }

      // add the new signature string
      if (show_sig && rcmail.env.signatures && rcmail.env.signatures[id]) {
        sig = rcmail.env.signatures[id].text;
        sig = sig.replace(/\r\n/g, '\n');

        // in place of removed signature
        if (p >= 0) {
          message = message.substring(0, p) + sig + message.substring(p, message.length);
          cursor_pos = p - 1;
        }
        // empty message or new-message mode
        else if (!message || !rcmail.env.compose_mode) {
          cursor_pos = message.length;
          message += '\n\n' + sig;
        }
        else if (rcmail.env.top_posting && !rcmail.env.sig_below) {
          // at cursor position
          if (pos = rcmail.get_caret_pos(input_message.get(0))) {
            message = message.substring(0, pos) + '\n' + sig + '\n\n' + message.substring(pos, message.length);
            cursor_pos = pos;
          }
          // on top
          else {
            message = '\n\n' + sig + '\n\n' + message.replace(/^[\r\n]+/, '');
            cursor_pos = 0;
          }
        }
        else {
          message = message.replace(/[\r\n]+$/, '');
          cursor_pos = !rcmail.env.top_posting && message.length ? message.length + 1 : 0;
          message += '\n\n' + sig;
        }
      }
      else {
        cursor_pos = rcmail.env.top_posting ? 0 : message.length;
      }
      input_message.val(message);

      // move cursor before the signature
      rcmail.set_caret_pos(input_message.get(0), cursor_pos);
    }
    else if (show_sig && rcmail.env.signatures) {  // html
       var myframe = document.getElementById("composebody_ifr");
        var body = myframe.contentWindow.document.getElementsByTagName("BODY")[0];
	var sigElem = body.querySelector("#_rc_sig"); 

      // Append the signature as a div within the body
      if (!sigElem) {
	var myframe = document.getElementById("composebody_ifr");
	var body = myframe.contentWindow.document.getElementsByTagName("BODY")[0];
        sigElem = $('<div id="_rc_sig"></div>').get(0);

	 // insert at start or at cursor position in top-posting mode
        // (but not if the content is empty and not in new-message mode)
        if (rcmail.env.top_posting && !rcmail.env.sig_below
          && rcmail.env.compose_mode && (body.childNodes.length > 1 || $(body).text()))
	{
	     body.insertBefore(sigElem, body.firstChild);
             $('<p>').append($('<br>')).insertBefore(sigElem);
        }
        else {
          body.appendChild(sigElem);
          position_element = rcmail.env.top_posting && rcmail.env.compose_mode ? body.firstChild : $(sigElem).prev();
        }
      }
      sigElem.innerHTML = rcmail.env.signatures[id] ? rcmail.env.signatures[id].html : '';
    }
    else if (!rcmail.env.top_posting) {
      position_element = $(this.editor.getBody()).children().last();
    }

  };

  // trigger content save
  this.save = function()
  {
    if (this.editor) {
	//this.editor.save();
    }
  };

  // focus the editing area
  this.focus = function()
  {
    (this.editor || rcube_find_object(this.id)).focus();
  };

}

